from __future__ import annotationsfrom typing import TYPE_CHECKINGif TYPE_CHECKING:
    from typing import *
    from sims.sim_info import SimInfo
    from services.rabbit_hole_service import RabbitHoleService
    from protocolbuffers.FileSerialization_pb2 import SaveGameDatafrom dataclasses import dataclass, fieldfrom distributor.ops import ShowHorseCompetitionSelector, ShowHorseCompetitionResultsfrom distributor.rollback import ProtocolBufferRollbackfrom event_testing.resolver import DoubleSimResolver, SingleSimResolverfrom event_testing.tests import TunableTestSetWithTooltip, TunableTestSetfrom protocolbuffers import GameplaySaveData_pb2from protocolbuffers.Consts_pb2 import FUNDS_EVENT_COST, FUNDS_EVENET_REWARDfrom sims.sim_info_types import Speciesfrom sims4 import logfrom sims4.localization import TunableLocalizedStringFactoryfrom sims4.random import weighted_random_indexfrom sims4.resources import CompoundTypesfrom sims4.service_manager import Servicefrom sims4.tuning.tunable import TunableList, TunableTuple, Tunable, HasTunableFactory, AutoFactoryInit, TunableReference, TunableResourceKey, TunableMapping, OptionalTunablefrom sims4.tuning.tunable_base import ExportModesfrom sims4.utils import classpropertyfrom snippets import define_snippetfrom tunable_multiplier import TunableMultiplier, TunableStatisticModifierCurvefrom ui.ui_dialog_picker import UiSimPicker, UiSkillsSimPicker, SimPickerRowimport distributor.systemimport persistence_error_typesimport servicesimport sims4.resourceslogger = sims4.log.Logger('HorseCompetitions', default_owner='mjuskelis')
class HorseCompetitionPlacement(TunableTuple):

    def __init__(self, *args, **kwargs):
        super().__init__(name=TunableLocalizedStringFactory(description='\n                The name of this placement.\n                ', export_modes=ExportModes.All), narrative_description=TunableLocalizedStringFactory(description='\n                The description of this placement, used in the results\n                screen.\n                ', export_modes=ExportModes.All), icon=TunableResourceKey(description='\n                The icon image to be displayed.\n                ', default=None, resource_types=CompoundTypes.IMAGE, export_modes=ExportModes.All), large_icon=TunableResourceKey(description='\n                A large version of the icon image to be displayed.\n                ', default=None, resource_types=CompoundTypes.IMAGE, export_modes=ExportModes.All), simoleon_amount=Tunable(description='\n                The simoleon amount given when earning this reward.\n\n                Note: this amount does NOT need to be tuned in\n                the loot in order to be given.\n                ', tunable_type=int, default=0, export_modes=ExportModes.All), loots=TunableList(description='\n                The loots that will be rewarded alongside the simoleon amount.\n                ', tunable=TunableReference(description='\n                    A loot that will be rewarded.\n                    ', manager=services.get_instance_manager(sims4.resources.Types.ACTION), class_restrictions=('LootActions',)), export_modes=(ExportModes.ServerXML,)), weight=TunableMultiplier.TunableFactory(description='\n                Calculations for the weight of getting this placement in the\n                competition.\n                ', export_modes=(ExportModes.ServerXML,)), skill_multipliers=TunableList(description='\n                A list of statistic curve modifiers for skill based weights.\n                ', tunable=TunableStatisticModifierCurve.TunableFactory(description='\n                    The curve to use to calculate the multiplier.\n                    '), export_modes=(ExportModes.ServerXML,)), medal_name=TunableLocalizedStringFactory(description='\n                The name we will use for the medal itself, including the word \'medal\'.\n                For example, "Gold Medal", or "No Medal".\n                ', export_modes=ExportModes.All), results_title_text=TunableLocalizedStringFactory(description='\n                The text we will use in the results screen when we get this placement.\n                \n                For example, "First Place!", or "Try Again!".\n                ', export_modes=ExportModes.All), frame_name=Tunable(description='\n                The frame label (NOT number) from the UI .fla file(s) that we want to \n                use for this placement. Determines various colors, effects, etc.\n                ', tunable_type=str, default='', export_modes=ExportModes.All), associated_horse_trait=TunableReference(description="\n                The trait that, if present on the horse, indicates that the horse has earned this placement before.\n                NOTE: this does NOT give the horse the trait, it only looks for this trait when loading\n                the horse's data.\n                ", manager=services.get_instance_manager(sims4.resources.Types.TRAIT), export_modes=(ExportModes.ServerXML,)), **kwargs)

class HorseCompetitionSkillRequirement(TunableTuple):

    def __init__(self, *args, **kwargs):
        super().__init__(skill=TunableReference(description='\n                The skill this requirement checks against.\n                ', manager=services.get_instance_manager(sims4.resources.Types.STATISTIC), class_restrictions=('Skill',), pack_safe=True, export_modes=ExportModes.All), recommended_level=Tunable(description='\n                The recommended level for the competitor to have with this skill.\n                ', tunable_type=int, default=0, export_modes=ExportModes.All), **kwargs)

class HorseCompetition(HasTunableFactory, AutoFactoryInit):
    FACTORY_TUNABLES = {'title': TunableLocalizedStringFactory(description='\n            The title of this competition.\n            ', export_modes=ExportModes.All), 'show_title': Tunable(description='\n            Do we want to display the title for this competition?\n            ', tunable_type=bool, default=True, export_modes=ExportModes.All), 'competition_description': TunableLocalizedStringFactory(description='\n            The description of this competition.\n            ', export_modes=ExportModes.All), 'entry_fee': Tunable(description='\n            The fee that must be paid to enter the competition.\n            ', tunable_type=int, default=0, export_modes=ExportModes.All), 'sim_skill_requirements': TunableList(description='\n            A list of all skill requirements recommended for the\n            sim entering this competition.\n            ', tunable=HorseCompetitionSkillRequirement(description='\n                A single skill requirement for the competition.\n                ', export_class_name='HorseCompetitionSkillRequirement'), export_modes=ExportModes.All), 'horse_skill_requirements': TunableList(description='\n            A list of all skill requirements recommended for the\n            horse entering this competition.\n            ', tunable=HorseCompetitionSkillRequirement(description='\n                A single skill requirement for the competition.\n                ', export_class_name='HorseCompetitionSkillRequirement'), export_modes=ExportModes.All), 'placements': TunableList(description='\n            A list of all the possible placements the competitors can get,\n            in descending order. Should include non-placement.\n            ', tunable=HorseCompetitionPlacement(description='\n                A single placement in the competition.\n                ', export_class_name='HorseCompetitionPlacement'), export_modes=ExportModes.All), 'availability_tests': TunableTestSetWithTooltip(description='\n            The tests that determine if this competition is available.\n            \n            Should include both general availability and competitor\n            specific availability.\n            ', export_modes=(ExportModes.ServerXML,)), 'hero_image': TunableResourceKey(description='\n            The hero image (larger image) used for this\n            competition.\n            ', default=None, resource_types=CompoundTypes.IMAGE, export_modes=ExportModes.All), 'cropped_hero_image': TunableResourceKey(description='\n            A cropped version of the hero image.\n            ', default=None, resource_types=CompoundTypes.IMAGE, export_modes=ExportModes.All), 'icon': TunableResourceKey(description='\n            The icon used to represent this competition.\n            ', default=None, resource_types=CompoundTypes.IMAGE, export_modes=ExportModes.All), 'prerequisite_tests': TunableTestSetWithTooltip(description='\n            The tests to determine if the given participants have\n            met all of the prerequisites, such as completing other competitions.\n            ', export_modes=(ExportModes.ServerXML,)), 'rabbit_hole': TunableReference(description='\n            The rabbit hole that the sim and horse will enter when participating in\n            this competition.\n            ', manager=services.get_instance_manager(sims4.resources.Types.RABBIT_HOLE), class_restrictions=('TwoSimRabbitHole',), export_modes=(ExportModes.ServerXML,))}
(HorseCompetitionReference, HorseCompetitionSnippet) = define_snippet('Horse_Competition', HorseCompetition.TunableFactory())
class HorseCompetitionCategory(HasTunableFactory, AutoFactoryInit):
    FACTORY_TUNABLES = {'name': TunableLocalizedStringFactory(description='\n            The name of this competition category.\n            ', export_modes=ExportModes.All), 'competitions': TunableList(description='\n            Competitions that are in this category.\n            ', tunable=HorseCompetitionReference(description='\n                A competition in this category.\n                '), export_modes=ExportModes.All)}
(HorseCompetitionCategoryReference, HorseCompetitionCategorySnippet) = define_snippet('Horse_Competition_Category', HorseCompetitionCategory.TunableFactory())